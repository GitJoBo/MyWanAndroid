plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
//    id 'com.hi.dhl.plugin'
}

//import com.hi.dhl.plugin.*

// 创建一个名为 keystorePropertiesFile 的变量，并将其初始化为 rootProject 文件夹中的 keystore.properties 文件。
def keystorePropertiesFile = rootProject.file("keystore.properties")

// 初始化一个名为 keystoreProperties 的新 Properties() 对象。
def keystoreProperties = new Properties()

// 将您的 keystore.properties 文件加载到 keystoreProperties 对象中。
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

// 获取当前系统时间
static def releaseTime() {
    return new Date().format("yyyyMMddHHmmss")
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    defaultConfig {
        applicationId "com.jobo.mywanandroid"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        //使用asXxx方法时必须，告知RxHttp你依赖的rxjava版本，可传入rxjava2、rxjava3
                        rxhttp_rxjava : 'rxjava3',
                        rxhttp_package: 'rxhttp'   //非必须，指定RxHttp类包名
                ]
            }
        }

        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi-v7a', 'x86'
//            'armeabi', 'x86','armeabi', 'armeabi-v7a' //, 'x86_64', 'arm64-v8a'
        }

        //解决渠道包报错All flavors must now belong to a named flavor dimension. Learn more at https://d.android.com/r/tools/flavorDimensions-missing-error-message.html
        flavorDimensions "versionCode"

    }
//    dataBinding {
//        enabled true
//    }
    buildFeatures {
        dataBinding = true
        // for view binding :
        // viewBinding = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

//    统一版本
    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion rootProject.ext.version["androidSupportSdkVersion"]
                }
            }
            if (requested.group == 'androidx.appcompat') {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion rootProject.ext.version["androidXSdkVersion"]
                }
            }
        }
    }

    productFlavors {
        Test {
            manifestPlaceholders = [APP_CHANNEL_VALUE: "Test"]
        }
        TheExistingNetwork {
            manifestPlaceholders = [APP_CHANNEL_VALUE: "TheExistingNetwork"]
        }
    }


    //打包改名
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            // 名称_android_版本号.apk
            def targetVersion = variant.getMergedFlavor().getTargetSdkVersion().getApiLevel()
            def minVersion = variant.getMergedFlavor().getMinSdkVersion().getApiLevel()
            if (buildType.name.equals("debug")) {
                outputFileName = "APP_V${defaultConfig.versionName}.apk"
            } else {
                outputFileName = "APP_${releaseTime()}_target${targetVersion}_min${minVersion}_V${defaultConfig.versionName}.apk"
            }
        }
    }

}
dependencies {

    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

//    implementation DependAndroidX.core_ktx
//    implementation DependAndroidX.appcompat
//    implementation DependAndroidX.constraintlayout
//    implementation DependGoogle.material
//    implementation Depend.junit
//    implementation Depend.androidTestJunit
//    implementation Depend.espressoCore
}